##ToDo
id
username
description
targetDate
done

Generate constructor
generate setters,getters,toString()

Now we need a database to store these values ,we will use mySQL
 first we will create a static list of todos i.e local H2 DB and later we can shift them to MYSQL.
 ---------------------------------------------------------------------------------------------------
 Things needed to list in a page
 1.ToDo controller
 2.Redirect a list ToDos
--------------------------------------------------------------------------------------------------------
div>Your ToDo's are :${todos}</div> ->{todos}->todos ->here should match with  model.addAttribute("todos",todos);
todos in the model.add...... then only the view renders.


-------------------------------------------------------------------------------------------------------------

Research about Request vsModel vs Session

--------------------------------------------------------------------------------------

js------>>>>>  \META-INF\resources\webjars\bootstrap\5.1.3\js\bootstrap.min.js

css------------->>> \META-INF\resources\webjars\bootstrap\5.1.3\css\bootstrap.min.css

jquery-------->>>> \META-INF\resources\webjars\jquery\3.6.0\jquery.min.js

---------------------------------------------------------------------------------------
Predicate<? super ToDo> predicate
                =todo->todo.getId()==id;  -> The code you provided declares a variable called predicate of type Predicate<? super ToDo>. The ? super ToDo part of the type declaration means that predicate can be used to test any object that is a subclass of ToDo.

                                            The next line of code assigns the following lambda expression to predicate:

                                            todo->todo.getId()==id;
                                            This lambda expression takes one argument, which is a ToDo object. The expression then compares the ID of the ToDo object to the variable id. If the IDs are equal, the lambda expression returns true. Otherwise, it returns false.

                                            In other words, this code declares a variable that can be used to test whether a ToDo object has a specific ID.

                                            Here is a more detailed explanation of the code:

                                            The Predicate interface is a functional interface that represents a predicate (boolean-valued function) of one argument.
                                            The ? super ToDo type parameter means that predicate can be used to test any object that is a subclass of ToDo.
                                            The lambda expression todo->todo.getId()==id takes one argument, which is a ToDo object. The expression then compares the ID of the ToDo object to the variable id. If the IDs are equal, the lambda expression returns true. Otherwise, it returns false.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


